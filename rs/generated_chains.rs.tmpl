// Automatically generated code, please DO NOT EDIT

use anyhow::{anyhow, Result};

pub type ChainId = u64;
pub type ChainSelector = u64;

#[derive(
    Debug, Hash, PartialEq, Eq, Clone, Copy, serde::Serialize, serde::Deserialize, PartialOrd, Ord,
)]
#[repr(u64)]
pub enum ChainName {
{{- range .}}
    {{ .VarName }} = {{ .EvmChainID }},
{{- end}}
}

impl ChainName {
    pub fn chain_id(self) -> ChainId {
        self as u64
    }

    pub fn from_chain_id(chain_id: u64) -> Option<ChainName> {
        match chain_id {
		{{- range .}}
			{{ .EvmChainID }} => Some(Self::{{ .VarName }}),
		{{- end}}
            _ => None,
        }
    }
}

impl std::str::FromStr for ChainName {
    type Err = anyhow::Error;

    fn from_str(input: &str) -> anyhow::Result<ChainName> {
        match input {
		{{- range .}}
			"{{ .EvmChainID }}" => Ok(Self::{{ .VarName }}),
		{{- end}}
            _ => Err(anyhow::anyhow!("unknown chain id: {}", input)),
        }
    }
}

impl std::fmt::Display for ChainName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "{}",
            match self {
			{{- range .}}
				Self::{{ .VarName }} => "{{ .EvmChainID }}",
			{{- end}}
            }
        )
    }
}

pub fn chain_selector(chain: ChainName) -> ChainSelector {
    match chain {
    {{- range .}}
        ChainName::{{ .VarName }} => {{ .Selector }},
    {{- end}}
    }
}
