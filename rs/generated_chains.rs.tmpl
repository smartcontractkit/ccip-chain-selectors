// Code generated by go generate ./rs please DO NOT EDIT

use std::{
    fmt::{Display, Formatter, Result as FmtResult},
    str::FromStr,
};
use thiserror::Error;

#[derive(Error, Debug, PartialEq, Eq, Clone)]
pub enum Error {
    #[error("unknown chain name: {0}")]
    UnknownChainName(String),
    #[error("unknown chain id: {0}")]
    UnknownChainId(u64),
    #[error("unknown chain selector: {0}")]
    UnknownChainSelector(u64),
}

#[derive(Debug, Hash, PartialEq, Eq, Clone, Copy)]
pub struct ChainId(pub u64);
#[derive(Debug, Hash, PartialEq, Eq, Clone, Copy)]
pub struct ChainSelector(pub u64);

#[derive(
    Debug, Hash, PartialEq, Eq, Clone, Copy, serde::Serialize, serde::Deserialize, PartialOrd, Ord,
)]
#[repr(u64)]
pub enum ChainName {
{{- range .}}
    {{ .VarName }} = {{ .EvmChainID }},
{{- end}}
}

impl From<ChainName> for ChainId {
    fn from(chain_name: ChainName) -> ChainId {
        ChainId(chain_name as u64)
    }
}

impl From<ChainName> for ChainSelector {
    fn from(chain_name: ChainName) -> ChainSelector {
        chain_selector(chain_name)
    }
}

impl TryFrom<ChainId> for ChainName {
    type Error = Error;

    fn try_from(chain_id: ChainId) -> Result<Self, Self::Error> {
        match chain_id.0 {
        {{- range .}}
            {{ .EvmChainID }} => Ok(Self::{{ .VarName }}),
        {{- end}}
            _ => Err(Error::UnknownChainId(chain_id.0)),
        }
    }
}

impl TryFrom<ChainSelector> for ChainName {
    type Error = Error;

    fn try_from(chain_selector: ChainSelector) -> Result<Self, Self::Error> {
        match chain_selector.0 {
        {{- range .}}
            {{ .Selector }} => Ok(Self::{{ .VarName }}),
        {{- end}}
            _ => Err(Error::UnknownChainSelector(chain_selector.0)),
        }
    }
}

impl FromStr for ChainName {
    type Err = Error;
    
    fn from_str(input: &str) -> Result<Self, Self::Err> {
        match input {
		{{- range .}}
			"{{ .Name }}" => Ok(Self::{{ .VarName }}),
		{{- end}}
            _ => Err(Error::UnknownChainName(input.to_string())),
        }
    }
}

impl Display for ChainName {
    fn fmt(&self, f: &mut Formatter) -> FmtResult {
        write!(
            f,
            "{}",
            match self {
			{{- range .}}
				Self::{{ .VarName }} => "{{ .Name }}",
			{{- end}}
            }
        )
    }
}

pub fn chain_selector(chain: ChainName) -> ChainSelector {
    match chain {
    {{- range .}}
        ChainName::{{ .VarName }} => ChainSelector({{ .Selector }}),
    {{- end}}
    }
}