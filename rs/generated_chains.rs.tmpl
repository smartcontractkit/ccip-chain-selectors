// Code generated by go generate ./rs please DO NOT EDIT

use anyhow::anyhow;
use std::{
    fmt::{Display, Formatter, Result as FmtResult},
    str::FromStr,
};

pub type ChainId = u64;
pub type ChainSelector = u64;

#[derive(
    Debug, Hash, PartialEq, Eq, Clone, Copy, serde::Serialize, serde::Deserialize, PartialOrd, Ord,
)]
#[repr(u64)]
pub enum ChainName {
{{- range .}}
    {{ .VarName }} = {{ .EvmChainID }},
{{- end}}
}

impl ChainName {
    pub fn chain_id(self) -> ChainId {
        self as u64
    }
}

impl TryFrom<ChainId> for ChainName {
    type Error = anyhow::Error;

    fn try_from(chain_id: ChainId) -> anyhow::Result<Self, Self::Error> {
        match chain_id {
		{{- range .}}
			{{ .EvmChainID }} => Ok(Self::{{ .VarName }}),
		{{- end}}
            _ => Err(anyhow!("unknown chain id: {}", chain_id)),
        }
    }
}

impl FromStr for ChainName {
    type Err = anyhow::Error;

    fn from_str(input: &str) -> anyhow::Result<ChainName> {
        match input {
		{{- range .}}
			"{{ .Name }}" => Ok(Self::{{ .VarName }}),
		{{- end}}
            _ => Err(anyhow::anyhow!("unknown chain name: {}", input)),
        }
    }
}

impl Display for ChainName {
    fn fmt(&self, f: &mut Formatter) -> FmtResult {
        write!(
            f,
            "{}",
            match self {
			{{- range .}}
				Self::{{ .VarName }} => "{{ .Name }}",
			{{- end}}
            }
        )
    }
}

pub fn chain_selector(chain: ChainName) -> ChainSelector {
    match chain {
    {{- range .}}
        ChainName::{{ .VarName }} => {{ .Selector }},
    {{- end}}
    }
}
